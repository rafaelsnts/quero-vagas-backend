// Datasource e Generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums (Mantidos como no seu original)
enum UserType {
  CANDIDATO
  EMPRESA
}

enum ModalidadeVaga {
  PRESENCIAL
  HIBRIDO
  REMOTO
}

enum StatusCandidatura {
  RECEBIDA
  EM_ANALISE
  APROVADO_ENTREVISTA
  REPROVADO
  CONTRATADO
}

// --- MODELOS PRINCIPAIS ---

model User {
  id                   Int      @id @default(autoincrement())
  email                String   @unique
  nome                 String
  senhaHash            String
  tipoUsuario          UserType
  passwordResetToken   String?  @unique
  passwordResetExpires DateTime?

  // Relações de CANDIDATO
  perfil               Perfil?
  experiencias         Experiencia[]
  formacoesAcademicas  FormacaoAcademica[]
  candidaturas         Candidatura[]
  notificacoes         Notificacao[]

  // Relação de EMPRESA (1-para-1)
  perfilEmpresa        PerfilEmpresa?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model PerfilEmpresa {
  id        Int      @id @default(autoincrement())
  cnpj      String   @unique
  descricao String?
  website   String?
  logoUrl   String?
  
  // Relação com User (1-para-1)
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // CORREÇÃO ARQUITETURAL: Vagas e Assinatura agora pertencem ao Perfil da Empresa.
  vagas       Vaga[]
  assinatura  Assinatura?
}


// --- MODELOS DE PAGAMENTO E PLANOS ---

model Plano {
  id            String       @id // Ex: "basico", "profissional"
  nome          String
  preco         Float
  limiteVagas   Int
  stripePriceId String       @unique // ID do preço no Stripe

  assinaturas   Assinatura[]
}

model Assinatura {
  id                    Int      @id @default(autoincrement())
  status                String   // Ex: "active", "canceled", "past_due"
  dataInicio            DateTime @default(now()) // Adicionado para controle de período
  dataFim               DateTime?

  // CORREÇÃO ARQUITETURAL: A assinatura está ligada ao PerfilEmpresa.
  empresaId             Int      @unique
  empresa               PerfilEmpresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  planoId               String
  plano                 Plano    @relation(fields: [planoId], references: [id])

  gatewaySubscriptionId String?  @unique
  gatewayCustomerId     String?
}


// --- MODELOS DE VAGAS E CANDIDATURAS ---

model Vaga {
  id                 Int              @id @default(autoincrement())
  titulo             String
  descricao          String
  requisitos         String
  salario            String?
  modalidade         ModalidadeVaga
  localizacao        String
  isDestaque         Boolean          @default(false)
  destaqueExpiresAt  DateTime?

  // CORREÇÃO ARQUITETURAL: A vaga está ligada ao PerfilEmpresa.
  empresaId          Int
  empresa            PerfilEmpresa    @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  
  candidaturas       Candidatura[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Candidatura {
  id          Int               @id @default(autoincrement())
  status      StatusCandidatura @default(RECEBIDA)
  anotacoes   String?
  
  vagaId      Int
  vaga        Vaga              @relation(fields: [vagaId], references: [id], onDelete: Cascade)
  
  candidatoId Int
  candidato   User              @relation(fields: [candidatoId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime          @default(now())

  @@unique([vagaId, candidatoId])
}


// --- MODELOS DE PERFIL DO CANDIDATO ---

model Perfil {
  id           Int     @id @default(autoincrement())
  resumo       String?
  telefone     String?
  linkedin     String?
  habilidades  String?
  curriculoUrl String?
  
  userId       Int     @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experiencia {
  id          Int       @id @default(autoincrement())
  cargo       String
  empresa     String
  dataInicio  DateTime
  dataFim     DateTime?
  descricao   String?
  
  candidatoId Int
  candidato   User      @relation(fields: [candidatoId], references: [id], onDelete: Cascade)
}

model FormacaoAcademica {
  id          Int       @id @default(autoincrement())
  instituicao String
  grau        String
  curso       String
  dataInicio  DateTime
  dataFim     DateTime?
  
  candidatoId Int
  candidato   User      @relation(fields: [candidatoId], references: [id], onDelete: Cascade)
}


// --- OUTROS MODELOS ---

model Notificacao {
  id             Int      @id @default(autoincrement())
  mensagem       String
  lida           Boolean  @default(false)
  
  destinatarioId Int
  destinatario   User     @relation(fields: [destinatarioId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime @default(now())
}
